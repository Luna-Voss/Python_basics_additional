type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 0
    length: 30
    placeholder_text: '# Tu zaimplementuj rozwiązanie'
    initial_state:
      length: 30
      offset: 0
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |
      amount = float(input())
      number_of_installments = int(input())

      if amount < 100.0 or amount > 10000.0:
          amount = 5000

      if number_of_installments < 6 or number_of_installments > 48:
          number_of_installments = 36

      if number_of_installments <= 12:
          loan_interest = 0.025
      elif number_of_installments <= 24:
          loan_interest = 0.05
      else:
          loan_interest = 0.1

      print(amount * (1.0 + loan_interest) / number_of_installments)
  text: '# Tu zaimplementuj rozwiązanie'
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |+
    import unittest


    def run(lines):
        try:
            import traceback
        except:
            return "can't import traceback"
        try:
            import os
            import pathlib
            import subprocess
            import sys
            file_dir = pathlib.Path(__file__).absolute().parent
            cmd = [sys.executable, str(file_dir.parent / 'task.py')]
            proc = subprocess.Popen(cmd,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE,
                                    stdin=subprocess.PIPE,
                                    encoding='utf-8',   # also for universal newlines
                                    )
            # we need to use '\n' even on Windows
            stdout, stderr = proc.communicate('\n'.join(lines) + '\n')
            # if everything is fine, stderr is empty
            return stdout + stderr
        except:
            return f"cwd: {os.getcwd()}\n{traceback.format_exc()}"


    class TestCase(unittest.TestCase):
        def test_1(self):
            out = run(['10', '10'])
            self.assertEqual(512.50, round(float(out), 2),
                             msg="Rata od kwoty 10.00 na 10 miesięcy wynosi 512.50 pownieważ kwota została podniesiona do 5,000.00.")

        def test_2(self):
            out = run(['100000', '10'])
            self.assertEqual(512.50, round(float(out), 2),
                             msg="Rata od kwoty 10,000.00 na 10 miesięcy wynosi 512.50 ponieważ kwota została pomniejszona do 5,000.00.")

        def test_3(self):
            out = run(['1000', '50'])
            self.assertEqual(30.56, round(float(out), 2),
                             msg="Rata od kwoty 1,000.00 na 50 miesięcy wynosi 30.56 ponieważ ilość rat została zmniejszona do 36.")

        def test_4(self):
            out = run(['1000', '2'])
            self.assertEqual(30.56, round(float(out), 2),
                             msg="Rata od kwoty 1,000.00 na 2 miesięcy wynosi 30.56 ponieważ ilość rat została zwiększona do 36.")

        def test_5(self):
            out = run(['7500.50', '36'])
            self.assertEqual(229.18, round(float(out), 2),
                             msg="Rata od kwoty 7,500.50 na 36 miesięcy wynosi 229.18.")

  learner_created: false
status: Unchecked
record: -1
