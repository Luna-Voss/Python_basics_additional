type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 0
    length: 30
    placeholder_text: '# Tu zaimplementuj rozwiązanie'
    initial_state:
      length: 30
      offset: 0
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |
      text = input()
      parentheses_open = 0

      for c in text:
          if c == "(":
              parentheses_open += 1
          if c == ")":
              parentheses_open -= 1

          if parentheses_open < 0:
              break

      if parentheses_open != 0:
          print("Błędne sparowanie nawiasów")
      else:
          print("OK")
  text: '# Tu zaimplementuj rozwiązanie'
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |+
    import unittest


    def run(lines):
        try:
            import traceback
        except:
            return "can't import traceback"
        try:
            import os
            import pathlib
            import subprocess
            import sys
            file_dir = pathlib.Path(__file__).absolute().parent
            cmd = [sys.executable, str(file_dir.parent / 'task.py')]
            proc = subprocess.Popen(cmd,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE,
                                    stdin=subprocess.PIPE,
                                    encoding='utf-8',   # also for universal newlines
                                    )
            # we need to use '\n' even on Windows
            stdout, stderr = proc.communicate('\n'.join(lines) + '\n')
            # if everything is fine, stderr is empty
            return stdout + stderr
        except:
            return f"cwd: {os.getcwd()}\n{traceback.format_exc()}"


    class TestCase(unittest.TestCase):
        def test_1(self):
            out = run(['2 * (3.4 - (-7)/2)*(a-2)/(b-1)))'])
            expected = "Błędne sparowanie nawiasów\n"
            self.assertEqual(expected, out,
                             msg="Dla tekstu 2 * (3.4 - (-7)/2)*(a-2)/(b-1))), program powinien wypisać w konsoli: \n{}".format(expected))

        def test_2(self):
            out = run(['(2 * (3.4 - (-7)/2)*(a-2)/(b-1))'])
            expected = "OK\n"
            self.assertEqual(expected, out,
                             msg="Dla tekstu (2 * (3.4 - (-7)/2)*(a-2)/(b-1)), program powinien wypisać w konsoli: \n{}".format(expected))

        def test_3(self):
            out = run([') 2 * 4 ('])
            expected = "Błędne sparowanie nawiasów\n"
            self.assertEqual(expected, out,
                             msg="Dla tekstu ) 2 * 4 (, program powinien wypisać w konsoli: \n{}".format(expected))

        def test_4(self):
            out = run(['((2 * 4)'])
            expected = "Błędne sparowanie nawiasów\n"
            self.assertEqual(expected, out,
                             msg="Dla tekstu ((2 * 4), program powinien wypisać w konsoli: \n{}".format(expected))

  learner_created: false
status: Unchecked
record: -1
