type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 0
    length: 30
    placeholder_text: '# Tu zaimplementuj rozwiązanie'
    initial_state:
      length: 30
      offset: 0
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |
      text = input()
      n = int(input())
      result = ""

      for i in range(len(text)):
          char = text[i]

          if char != " ":
              result += chr((ord(char) + n - 97) % 26 + 97)
          else:
              result += char

      print(result)
  text: '# Tu zaimplementuj rozwiązanie'
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import unittest


    def run(lines):
        try:
            import traceback
        except:
            return "can't import traceback"
        try:
            import os
            import pathlib
            import subprocess
            import sys
            file_dir = pathlib.Path(__file__).absolute().parent
            cmd = [sys.executable, str(file_dir.parent / 'task.py')]
            proc = subprocess.Popen(cmd,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE,
                                    stdin=subprocess.PIPE,
                                    encoding='utf-8',   # also for universal newlines
                                    )
            # we need to use '\n' even on Windows
            stdout, stderr = proc.communicate('\n'.join(lines) + '\n')
            # if everything is fine, stderr is empty
            return stdout + stderr
        except:
            return f"cwd: {os.getcwd()}\n{traceback.format_exc()}"


    class TestCase(unittest.TestCase):
        def test_1(self):
            out = run(['ala ma kota', '1'])
            expected = "bmb nb lpub\n"
            self.assertEqual(expected, out,
                             msg="Dla tekstu Ala ma kota oraz n = 1, program powinien wypisać w konsoli: \n{}".format(expected))

        def test_2(self):
            out = run(['ala ma kota', '26'])
            expected = "ala ma kota\n"
            self.assertEqual(expected, out,
                             msg="Dla tekstu Ala ma kota oraz n = 26, program powinien wypisać w konsoli: \n{}".format(expected))

        def test_3(self):
            out = run(['to jest zdanie', '13'])
            expected = "gb wrfg mqnavr\n"
            self.assertEqual(expected, out,
                             msg="Dla tekstu To jest zdanie oraz n = 13, program powinien wypisać w konsoli: \n{}".format(expected))
  learner_created: false
status: Unchecked
record: -1
